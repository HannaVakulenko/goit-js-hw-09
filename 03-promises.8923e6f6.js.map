{"mappings":"qhBAMA,IAAAA,EAAAC,EAAA,SAG+B,MAAzBC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,wBAC/BI,iBAAkBL,SAASC,cAAc,0BAIrCK,EAAgB,CAACC,EAAUC,IACf,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,IAkCbV,EAAKO,iBAAiBU,iBAAiB,SA5BjBC,IACpBA,EAAEC,iBAI2F,IAAzFC,EAAaC,OAAOrB,EAAKI,WAAWkB,OACpCC,EAAYF,OAAOrB,EAAKK,UAAUiB,OAGwC,IAAzE,IAAIE,EAAI,EAAGA,EAAIxB,EAAKM,OAAOgB,MAAOE,IAGsChB,EAA7D,EAAIgB,EAAGJ,EAAaI,EAAID,GACnCE,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBnB,QAAiBC,MAAU,IAGnDmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBrB,QAAiBC,MAAU,IAIvDV,EAAKC,KAAK8B,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу(position),\n// що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Імпорт бібліотеки notiflix\nimport Notiflix from 'notiflix';\n\n// Отримання посилань на елементи дому\nconst refs = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  createPromiseBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\n//Функція створення промісу\nconst createPromise = (position, delay) => {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n};\n\n// Функція обробки події\nconst handleOnClick = e => {\n  e.preventDefault(); // відміна оновлення сторінки за замовчуванням при натисканні кнопки з типом \"Submit\"\n\n  // Обробка введених даних в інпутах\n  // Отримання числових значень першої затримки в мілісекундах та кроку збільшення затримки для кожного промісу\n  let firstDelay = Number(refs.inputDelay.value);\n  let delayStep = Number(refs.inputStep.value);\n\n  // Створення циклу, який перебирає по введеній користувачем кількості проміси, що створюються\n  for (let i = 0; i < refs.amount.value; i++) {\n    // Виклик функції створення промісів стільки разів, скільки введено в поле amount.\n    // Після першої затримки кожна наступна буде збільшуватися на введений користувачем крок\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  refs.form.reset(); //очищення полів форми\n};\n\n// Додавання слухача на клік на кнопку\nrefs.createPromiseBtn.addEventListener('click', handleOnClick);\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","inputDelay","inputStep","amount","createPromiseBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","firstDelay","Number","value","delayStep","i","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.8923e6f6.js.map"}